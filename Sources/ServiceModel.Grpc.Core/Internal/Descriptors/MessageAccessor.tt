<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Grpc.Core.Utils;
using ServiceModel.Grpc.Channel;

#nullable enable

namespace ServiceModel.Grpc.Internal.Descriptors;

<#
for (var argsCount=0; argsCount<=3; argsCount++)
{
    var genericArgs = string.Join(", ", Enumerable.Range(1, argsCount).Select(i => "T" + i));
    if (argsCount > 0)
    {
        genericArgs = "<" + genericArgs + ">";
    }
    //         private T1 _value1;
    var ctorArgs = string.Join(", ", Enumerable.Range(1, argsCount).Select(i => "T" + i + "? value" + i));
#>
internal sealed class MessageAccessor<#= genericArgs #> : IMessageAccessor
{
    public MessageAccessor(string[] names)
    {
        if (GrpcPreconditions.CheckNotNull(names, nameof(names)).Length != <#= argsCount #>)
        {
            throw new ArgumentOutOfRangeException(nameof(names));
        }

        Names = names;
    }

    public string[] Names { get; }

    public object CreateNew() => new Message<#= genericArgs #>();

    public Type GetInstanceType() => typeof(Message<#= genericArgs #>);

    public Type GetValueType(int property)
    {
<#
if (argsCount > 0)
{
#>
        switch (property)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            case <#= a #>:
                return typeof(T<#= a #>);
<#
            }
#>
        }
<#
}
#>
        throw new ArgumentOutOfRangeException(nameof(property));
    }

    public object? GetValue(object message, int property)
    {
<#
if (argsCount > 0)
{
#>
        switch (property)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            case <#= a #>:
                return GrpcPreconditions.CheckNotNull((Message<#= genericArgs #>)message, nameof(message)).Value<#= a #>;
<#
            }
#>
        }
<#
}
#>
        throw new ArgumentOutOfRangeException(nameof(property));
    }

    public void SetValue(object message, int property, object? value)
    {
<#
if (argsCount > 0)
{
#>
        switch (property)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            case <#= a #>:
                GrpcPreconditions.CheckNotNull((Message<#= genericArgs #>)message, nameof(message)).Value<#= a #> = (T<#= a #>?)value;
                return;
<#
            }
#>
        }
<#
}
#>
        throw new ArgumentOutOfRangeException(nameof(property));
    }
}

<#
}
#>