using System;
using System.Threading;
using System.Threading.Tasks;
using Contract;
using Grpc.Core;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Server.Services;
using ServiceModel.Grpc.Configuration;
using ServiceModel.Grpc.Interceptors;

namespace Server;

internal sealed class ServerHost : IHostedService
{
    private const int Port = 8082;

    private readonly Grpc.Core.Server _server;

    public ServerHost(IServiceProvider serviceProvider)
    {
        _server = new()
        {
            Ports = { new ServerPort("localhost", Port, ServerCredentials.Insecure) }
        };

        // see Services.GrpcServices.cs
        // host Calculator endpoint generated by ServiceModel.Grpc.DesignTime
        // see https://max-ieremenko.github.io/ServiceModel.Grpc/GrpcCoreServerConfiguration.html
        _server.Services.AddCalculator(
            serviceProvider,
            options =>
            {
                // set NerdbankMessagePackMarshaller with generated formatters as default Marshaller
                options.MarshallerFactory = new NerdbankMessagePackMarshallerFactory(PolyTypes.TypeShapeProvider);

                // Filters: log gRPC calls
                options.Filters.Add(1, options.ServiceProvider!.GetRequiredService<LoggingServerFilter>());

                // Error handling: activate ServerErrorHandler
                options.ErrorHandler = options.ServiceProvider!.GetRequiredService<IServerErrorHandler>();
            });
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        _server.Start();
        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken) => _server.ShutdownAsync();
}